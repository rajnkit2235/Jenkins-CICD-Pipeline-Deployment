pipeline {
    agent { 
        label 'jenkins-agent'  // Your K8s-enabled jenkins agent
    }
    
    triggers {
        githubPush()  // Automatic trigger on GitHub push
    }
    
    environment {
        // Your exact configuration
        DOCKER_USERNAME = 'rajankit6203'
        IMAGE_NAME = 'smartassist-ai-customer-support'  // Working image name
        K8S_NAMESPACE = 'smart-frontened'               // Your namespace
        KUBECONFIG = credentials('kubeconfig-file')     // Your kubeconfig credential
        IMAGE_TAG = 'latest'                            // Always use latest to avoid bloat
    }
    
    stages {
        // STEP 1: Clone your public GitHub repo
        stage('Clone') {
            steps {
                echo 'üì• Cloning SmartAssist AI from GitHub...'
                
                // Your public repo - no credentials needed
                git url: 'https://github.com/rajnkit2235/Jenkins-CICD-Pipeline-Deployment.git', 
                    branch: 'main'
                
                echo '‚úÖ Successfully cloned repository!'
            }
        }
        
        // STEP 2: Build Docker image with cleanup (no cache bloat)
        stage('Build Docker Image') {
            steps {
                echo 'üèóÔ∏è Building SmartAssist AI Docker image...'
                
                sh """
                    echo "üßπ Cleaning old Docker cache and unused images..."
                    
                    # Remove all unused Docker data to prevent server bloat
                    docker system prune -af --volumes || true
                    
                    # Remove any existing images with same name
                    docker rmi ${DOCKER_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG} 2>/dev/null || true
                    
                    echo "üèóÔ∏è Building fresh image with --no-cache..."
                    
                    # Build with --no-cache for fresh builds every time
                    docker build --no-cache -t ${DOCKER_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG} .
                    
                    echo "üìä Current Docker images:"
                    docker images | head -10
                    
                    echo "üíæ Disk usage after build:"
                    df -h | grep -E '(Filesystem|/dev/)' | head -2
                """
                
                echo '‚úÖ Docker image built successfully!'
            }
        }
        
        // STEP 3: Test the built image
        stage('Testing') {
            steps {
                echo 'üß™ Testing SmartAssist AI image...'
                
                sh """
                    echo "Testing the built Docker image..."
                    
                    # Quick test - verify image runs without errors
                    docker run --rm ${DOCKER_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG} echo "‚úÖ Image test successful!"
                    
                    echo "‚úÖ Basic image validation passed!"
                """
                
                echo '‚úÖ All tests completed successfully!'
            }
        }
        
        // STEP 4: Push to Docker Hub (secure - no password exposed)
        stage('Push Docker Image') {
            steps {
                echo 'üì§ Pushing SmartAssist AI to Docker Hub...'
                echo 'üîê Using secure Jenkins credentials (password never exposed)...'
                
                // SECURE: Password stored in Jenkins, never visible in logs
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        echo "üîê Logging into Docker Hub securely..."
                        
                        # Login using Jenkins-stored credentials
                        echo \$DOCKER_PASS | docker login -u \$DOCKER_USER --password-stdin
                        
                        echo "üì§ Pushing ${DOCKER_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}..."
                        
                        # Push the image
                        docker push ${DOCKER_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}
                        
                        echo "‚úÖ Image successfully pushed to Docker Hub!"
                        echo "üåê Available at: https://hub.docker.com/r/${DOCKER_USERNAME}/${IMAGE_NAME}"
                        
                        # Logout for security
                        docker logout
                    """
                }
                
                echo '‚úÖ Docker image pushed successfully!'
            }
        }
        
        // STEP 5: Deploy to Kubernetes (KIND cluster compatible)
        stage('Deploy to Kubernetes') {
            steps {
                echo 'üöÄ Deploying SmartAssist AI to Kubernetes...'
                
                sh """
                    echo "üìù Updating deployment.yaml with image: ${DOCKER_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}"
                    
                    # Update deployment.yaml with the actual image
                    sed -i 's|IMAGE_PLACEHOLDER|${DOCKER_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}|g' k8s/deployment.yaml
                    
                    echo "=== Deployment Configuration ==="
                    cat k8s/deployment.yaml | grep -A 3 -B 3 image:
                    
                    echo "üöÄ Applying deployment to namespace: ${K8S_NAMESPACE}..."
                    
                    # Apply deployment
                    kubectl --kubeconfig=\$KUBECONFIG apply -f k8s/deployment.yaml -n ${K8S_NAMESPACE}
                    
                    echo "üåê Applying service configuration..."
                    
                    # Apply service
                    kubectl --kubeconfig=\$KUBECONFIG apply -f k8s/service.yaml -n ${K8S_NAMESPACE}
                    
                    echo "‚è≥ Waiting for deployment to complete..."
                    
                    # Wait for rollout to finish (rolling update)
                    kubectl --kubeconfig=\$KUBECONFIG rollout status deployment/smartassist-ai-app -n ${K8S_NAMESPACE} --timeout=300s
                    
                    echo "üîó Setting up external access for KIND cluster..."
                    
                    # Kill any existing port forwards
                    pkill -f "kubectl port-forward.*smartassist-ai-service" || true
                    sleep 2
                    
                    # Start port forward in background for external access (KIND cluster requirement)
                    nohup kubectl --kubeconfig=\$KUBECONFIG port-forward --address 0.0.0.0 service/smartassist-ai-service 8080:80 -n ${K8S_NAMESPACE} > /tmp/port-forward.log 2>&1 &
                    
                    # Give port-forward time to start
                    sleep 5
                """
                
                echo '‚úÖ Deployment to Kubernetes completed!'
            }
        }
        
        // STEP 6: Verify deployment and accessibility
        stage('Verify Deployment') {
            steps {
                echo 'üîç Verifying SmartAssist AI deployment...'
                
                sh """
                    echo "=== NAMESPACE: ${K8S_NAMESPACE} ==="
                    kubectl --kubeconfig=\$KUBECONFIG get namespace ${K8S_NAMESPACE}
                    
                    echo "=== PODS STATUS ==="
                    kubectl --kubeconfig=\$KUBECONFIG get pods -n ${K8S_NAMESPACE} -l app=smartassist-ai-app -o wide
                    
                    echo "=== SERVICES STATUS ==="
                    kubectl --kubeconfig=\$KUBECONFIG get svc -n ${K8S_NAMESPACE} -l app=smartassist-ai-app
                    
                    echo "=== DEPLOYMENT STATUS ==="
                    kubectl --kubeconfig=\$KUBECONFIG get deployment smartassist-ai-app -n ${K8S_NAMESPACE}
                    
                    echo "=== TESTING CONNECTIVITY ==="
                    
                    # Test internal connectivity
                    timeout 10 kubectl --kubeconfig=\$KUBECONFIG exec -n ${K8S_NAMESPACE} deployment/smartassist-ai-app -- curl -s localhost:80 | head -5 || echo "Internal connectivity check completed"
                    
                    echo "=== ACCESS INFORMATION ==="
                    echo "üåê External URL: http://13.221.231.200:8080"
                    echo "üì± Your SmartAssist AI is accessible externally!"
                    echo "üîß Port forward: kubectl port-forward --address 0.0.0.0 service/smartassist-ai-service 8080:80 -n ${K8S_NAMESPACE}"
                    
                    echo "=== RECENT EVENTS ==="
                    kubectl --kubeconfig=\$KUBECONFIG get events -n ${K8S_NAMESPACE} --sort-by='.lastTimestamp' | tail -5
                """
                
                echo 'üéâ SmartAssist AI Customer Support is running successfully on Kubernetes!'
                echo 'üì± Your AI app is ready to serve customers!'
            }
        }
    }
    
    // Post-build actions
    post {
        success {
            echo 'üéâ SUCCESS! SmartAssist AI deployed to Kubernetes!'
            echo ''
            echo 'üìä Deployment Summary:'
            echo "   ‚úÖ Image: ${DOCKER_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}"
            echo "   ‚úÖ Namespace: ${K8S_NAMESPACE}"
            echo "   ‚úÖ Cluster: KIND (Kubernetes in Docker)"
            echo '   ‚úÖ Zero downtime rolling update completed'
            echo '   ‚úÖ Auto-healing pods enabled'
            echo '   ‚úÖ External access configured'
            echo ''
            echo 'üåê Access your SmartAssist AI:'
            echo '   ‚Ä¢ External URL: http://13.221.231.200:8080'
            echo '   ‚Ä¢ Chat widget, features, and testimonials ready!'
            echo '   ‚Ä¢ AI customer support fully functional'
            echo ''
            echo 'üßπ Docker cleanup completed - no storage bloat!'
        }
        
        failure {
            echo '‚ùå FAILURE: SmartAssist AI deployment failed!'
            echo ''
            echo 'üîß Troubleshooting steps:'
            echo "   1. Check Docker build: docker images | grep ${IMAGE_NAME}"
            echo '   2. Check kubectl access: kubectl get nodes'
            echo "   3. Check pods: kubectl logs -l app=smartassist-ai-app -n ${K8S_NAMESPACE}"
            echo "   4. Check events: kubectl get events -n ${K8S_NAMESPACE} --sort-by='.lastTimestamp'"
            echo '   5. Check KIND cluster: docker ps | grep kind'
            echo '   6. Check port forward: ps aux | grep port-forward'
        }
        
        always {
            echo 'üèÅ Pipeline completed!'
            
            sh '''
                echo "üßπ Final cleanup - removing unused Docker resources..."
                
                # Clean up any dangling images and free up space
                docker system prune -f || true
                
                # Show remaining disk space
                echo "üíæ Remaining disk space:"
                df -h | grep -E '(Filesystem|/dev/)' | head -2
                
                echo "üìä Active Docker containers:"
                docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}" | head -5
                
                echo "üîó Port forward status:"
                ps aux | grep -E "port-forward.*smartassist" | grep -v grep || echo "No active port forwards"
            '''
            
            echo '‚ú® jenkins-agent server cleanup completed!'
        }
    }
}
